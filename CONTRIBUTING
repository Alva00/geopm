CONTRIBUTING
============
This file describes how to contribute to the geopm project.  We would like to
support development (build and unit testing) on a number of platforms.  Please
report any issues you have with build and unit testing on your favorite
development platform.


CODING STYLE
============
Code formatting can be corrected to conform to the standard using
astyle with the following options:

    astyle --style=linux --indent=spaces=4 -y -S -C -N

TEST INSTRUCTIONS
=================
To test the library once it has been built run

    make check


COVERAGE INSTRUCTIONS
=====================
To generate a coverage report, first be sure that you have installed
the lcov package available here:

    http://ltp.sourceforge.net/coverage/lcov.php

The geopm build must be configured with the "--enable-coverage" option.  Then
simply run

    make coverage

which run tests and produce a coverage report in

    coverage/index.html

Note that all tests must pass in order to generate a coverage report.


LIBRARY DESIGN
==============

The geopm library solves a range of distributed computing power management
problems.  We will break down each of these problems first and then propose a
solution.  The library is designed to implement these solutions with the
intention of balancing the trade offs between two goals: performance and
code reuse.

Problem 1: Fixed control
------------------------

Requirements:
~~~~~~~~~~~~~

Must set MSR values on all of the compute nodes that are part of an MPI job
allocation before the application starts up.  At application termination, reset
MSRs to original values.  The values for these MSRs are derived from a
configuration file read at application start up.  This configuration file may
have been generated by the resource manager.

Solution:
~~~~~~~~~

Problem can be solved with one application that runs on every compute node
independently.  MPI can be used for process placement, or a distributed shell
or parallel job launch (e.g. srun or aprun) can be used.  No communication is
required beyond access to a shared file system to read the configuration file.
Command can be issued in epilogue and prologue script.  No modifications to
the application are required.  Abstraction of hardware may have some value,
but not strictly necessary since application is not being modified, and
epilogue and prologue script are installation specific.

Problem 2: Application profile feedback
---------------------------------------

Requirements:
~~~~~~~~~~~~~

Must write MSR values dynamically at runtime in response to feedback from
computation application and feedback from system resource manager.  This
feedback is derived from the compute application and the resource manager
making calls to GEOPM APIs.

The application feedback includes:

1) Registration of a string and a 64 bit integer identifier associated with a
   section of code with a distinct computational signature (phase).  If no
   identifier is provided, define a hash function to map string to 64 bit
   integer.

2) Identifying entry and exit from section of code associated with a phase.

3) Measuring performance counter registers to characterize a phase at time of
   phase entry and phase exit.

4) Marking fractional progress within a phase.

5) Phases cannot be nested: only outer-most phase is profiled, nested phases
   are ignored.  This avoids phase ID lookup for progress reporting which must
   be in the fast path.  It also avoids storing counter data for more than one
   phase at a time, only aggregated data is stored for every phase.

The resource manager feedback includes:

1) For static control, write a configuration file that sets a power budget for
   the entire job.  Pass the path to the configuration file to the calling
   application.

2) For dynamic control, write to shared memory a power budget for the entire
   job.  The shared memory region must be accessible from the root process of
   the job's MPI communicator.

Solution with application integration of control:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



Solution with POSIX thread creation:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



Solution with a helper process:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the application processes are impacted to an unacceptable level, an
alternative solution would introduce one process per compute node that is
dedicated to calculating optimal control policy.  This dedicated process would
be pinned to a CPU that is not used by the primary application.  The
alternative solution is more easily justified on a many-core architecture and
an application which is memory bandwidth bound, or memory footprint bound.  In
these situations the cores used for control would otherwise provide no
benefit, at least during the process phases which are bounded by memory
constraints.  There are several challenges introduced by this solution with
regard to process creation and interprocess communication.

Modify job launch script to simultaneously launch MPI application used for
control.  This control application communicates by POSIX shared memory with
one of the primary application processes on each compute node.  The POSIX
shared memory key must be passed to the primary application at start up, and
is the same string on all compute nodes under control.  Process placement on
an unused core is resource management specific.  This will have to be managed
by the end user.

Problem 3: Unmodified application feedback
------------------------------------------

Requirements
~~~~~~~~~~~~

Must write MSR values dynamically at runtime in response to feedback collected
at a periodic interval by a daemon process measuring package level performance
counters and interrupting the application to measure CPU specific performance
counters.  This is a stretch goal, and not intended to be solved by early
versions of geopm.

Node local optimizations

- Temporal energy steering from one phase to another

- Per phase optimization energy steering between CPUs on a package (tile
  groups)

- Spatially steering optimization of power between different hardware resources

Internode optimizations

- Spatially steering the allocation of power between nodes
